#ifndef __RHICommonDefs_h__
#define __RHICommonDefs_h__

enum NGFXRHIType 
{
  NGFX_RHI_VULKAN,
  NGFX_RHI_METAL,
  NGFX_RHI_D3D12,
  NGFX_RHI_OPENGL,
};

enum NGFXCommandType 
{
  NGFX_COMMAND_BUNDLE,
  NGFX_COMMAND_GRAPHICS,
  NGFX_COMMAND_COMPUTE,
};

enum NGFXCommandReuseType 
{
  NGFX_COMMAND_USAGE_ONE_SHOT,
  NGFX_COMMAND_USAGE_REUSABLE
};

enum NGFXPipelineType 
{
  NGFX_PIPELINE_Compute,
  NGFX_PIPELINE_GRAPHICS
};

enum NGFXPixelFormat 
{
  NGFX_PIXEL_FORMAT_RGBA16_UINT,
  NGFX_PIXEL_FORMAT_RGBA32_FLOAT,
  NGFX_PIXEL_FORMAT_RGBA8_UNORM,
  NGFX_PIXEL_FORMAT_RGBA8_UNORM_SRGB,
  NGFX_PIXEL_FORMAT_R11_G11_B10_FLOAT,
  NGFX_PIXEL_FORMAT_D32_FLOAT,
  NGFX_PIXEL_FORMAT_RGB32_FLOAT,
  NGFX_PIXEL_FORMAT_RGB8_UNORM,
  NGFX_PIXEL_FORMAT_BGRA8_UNORM, // Apple Metal Layer uses it as default pixel format
  NGFX_PIXEL_FORMAT_BGRA8_UNORM_SRGB,
  NGFX_PIXEL_FORMAT_RGBA16_FLOAT,
  NGFX_PIXEL_FORMAT_D24_S8,
  NGFX_PIXEL_FORMAT_NUM,
};

enum NGFXVertexFormat 
{
  NGFX_VERTEX_FORMAT_FLOAT1X32,
  NGFX_VERTEX_FORMAT_FLOAT2X32,
  NGFX_VERTEX_FORMAT_FLOAT3X32,
  NGFX_VERTEX_FORMAT_FLOAT4X32,
  NGFX_VERTEX_FORMAT_NUM
};

enum NGFXVertexInputRate 
{
  NGFX_VERTEX_INPUT_RATE_PER_VERTEX,
  NGFX_VERTEX_INPUT_RATE_PER_INSTANCE
};

enum NGFXMultiSampleFlag 
{
  NGFX_MULTI_SAMPLE_1X,
  NGFX_MULTI_SAMPLE_2X,
  NGFX_MULTI_SAMPLE_4X,
  NGFX_MULTI_SAMPLE_8X,
  NGFX_MULTI_SAMPLE_16X,
  NGFX_MULTI_SAMPLE_32X,
};

enum NGFXPrimitiveType 
{
  NGFX_PRIMITIVE_POINTS,
  NGFX_PRIMITIVE_LINES,
  NGFX_PRIMITIVE_TRIANGLES,
  NGFX_PRIMITIVE_TRIANGLE_STRIP,
  NGFX_PRIMITIVE_NUM
};

enum NGFXShaderType 
{
  NGFX_SHADER_TYPE_FRAGMENT,
  NGFX_SHADER_TYPE_VERTEX,
  NGFX_SHADER_TYPE_GEOMETRY,
  NGFX_SHADER_TYPE_HULL,
  NGFX_SHADER_TYPE_DOMAIN,
  NGFX_SHADER_TYPE_COMPUTE,
};

enum NGFXLoadAction 
{
  NGFX_LOAD_ACTION_LOAD,
  NGFX_LOAD_ACTION_CLEAR,
  NGFX_LOAD_ACTION_DONT_CARE
};

enum NGFXStoreAction 
{
  NGFX_STORE_ACTION_STORE,
  NGFX_STORE_ACTION_DONT_CARE
};

enum NGFXBlendOperation 
{
  NGFX_BLEND_OP_ADD,
  NGFX_BLEND_OP_SUB,
  NGFX_BLEND_OP_NUM
};

enum NGFXBlendFactor 
{
  NGFX_BLEND_FACTOR_ZERO,
  NGFX_BLEND_FACTOR_ONE,
  NGFX_BLEND_FACTOE_SRC_COLOR,
  NGFX_BLEND_FACTOR_DEST_COLOR,
  NGFX_BLEND_FACTOR_SRC_ALPHA,
  NGFX_BLEND_FACTOR_DEST_ALPHA,
  NGFX_BLEND_FACTOR_NUM
};

enum NGFXFillMode 
{
  NGFX_FILL_MODE_WIRE_FRAME,
  NGFX_FILL_MODE_SOLID,
  NGFX_FILL_MODE_NUM
};

enum NGFXCullMode 
{
  NGFX_CULL_MODE_NONE,
  NGFX_CULL_MODE_FRONT,
  NGFX_CULL_MODE_BACK,
  NGFX_CULL_MODE_NUM
};

enum NGFXStencilOp 
{
  NGFX_STENCIL_OP_KEEP,
  NGFX_STENCIL_OP_ZERO,
  NGFX_STENCIL_OP_REPLACE,
  NGFX_STENCIL_OP_INVERT,
  NGFX_STENCIL_OP_INCREMENT,
  NGFX_STENCIL_OP_DECREMENT,
  NGFX_STENCIL_OP_NUM
};

enum NGFXComparisonFunc 
{
  NGFX_COMPARISON_FUNCTION_NEVER,
  NGFX_COMPARISON_FUNCTION_LESS,
  NGFX_COMPARISON_FUNCTION_EQUAL,
  NGFX_COMPARISON_FUNCTION_LESS_EQUAL,
  NGFX_COMPARISON_FUNCTION_GREATER,
  NGFX_COMPARISON_FUNCTION_NOT_EQUAL,
  NGFX_COMPARISON_FUNCTION_GREATER_EQUAL,
  NGFX_COMPARISON_FUNCTION_ALWAYS,
  NGFX_COMPARISON_FUNCTION_NUM
};

enum NGFXDepthWriteMask 
{
  NGFX_DEPTH_WRITE_MASK_ZERO,
  NGFX_DEPTH_WRITE_MASK_ALL,
  NGFX_DEPTH_WRITE_MASK_NUM
};

enum NGFXFilterMethod 
{
  NGFX_FILTER_METHOD_POINT, // Nearest
  NGFX_FILTER_METHOD_LINEAR,
  NGFX_FILTER_METHOD_NUM
};

enum NGFXFilterReductionType 
{
  EFRT_Standard,
  EFRT_Comparison, // all three other filter should be linear
  EFRT_Minimum,
  EFRT_Maximum,
  FilterReductionTypeNum
};

enum NGFXAddressMode 
{
  NGFX_ADDRESS_MODE_WRAP,
  NGFX_ADDRESS_MODE_MIRROR, // Repeat
  NGFX_ADDRESS_MODE_CLAMP,
  NGFX_ADDRESS_MODE_BORDER,
  NGFX_ADDRESS_MODE_MIRROR_ONCE,
  NGFX_ADDRESS_MODE_NUM
};


/*
VK_IMAGE_LAYOUT_GENERAL / D3D12_RESOURCE_STATE_COMMON
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL / D3D12_RESOURCE_STATE_RENDER_TARGET
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL /
D3D12_RESOURCE_STATE_DEPTH_WRITE | D3D12_RESOURCE_STATE_DEPTH_READ
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL /
D3D12_RESOURCE_STATE_DEPTH_READ VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL /
D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE |
D3D12_RESOURCE_STATE_UNORDERED_ACCESS VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL /
D3D12_RESOURCE_STATE_COPY_SOURCE VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL /
D3D12_RESOURCE_STATE_COPY_DEST VK_IMAGE_LAYOUT_PRESENT_SRC_KHR /
D3D12_RESOURCE_STATE_PRESENT
D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER |
D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE
*/
enum NGFXResourceState 
{
  NGFX_RESOURCE_STATE_COMMON,
  NGFX_RESOURCE_STATE_PRESENT, // D3D12_RESOURCE_STATE_PRESENT/VK_IMAGE_LAYOUT_PRESENT_SRC_KHR?
  NGFX_RESOURCE_STATE_RENDER_TARGET, // D3D12_RESOURCE_STATE_RENDER_TARGET/VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL?
  NGFX_RESOURCE_STATE_SHADER_RESOURCE,
  NGFX_RESOURCE_STATE_TRANSFER_DST,
  NGFX_RESOURCE_STATE_TRANSFER_SRC,
  NGFX_RESOURCE_STATE_DEPTH_STENCIL,
  NGFX_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER, // D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER
  NGFX_RESOURCE_STATE_UNORDERED_ACCESS,
  NGFX_RESOURCE_STATE_UNKNOWN,
  NGFX_RESOURCE_STATE_NUM
};

enum NGFXResourceViewTypeBits 
{
  NGFX_RESOURCE_VIEW_UNDEFINED = 0,
  NGFX_RESOURCE_VERTEX_BUFFER_VIEW = 1, // For VertexBuffer
  NGFX_RESOURCE_INDEX_BUFFER_VIEW = 2, // For IndexBuffer
  NGFX_RESOURCE_CONSTANT_BUFFER_VIEW = 4, // For ConstantBuffer,
  NGFX_RESOURCE_SHADER_RESOURCE_VIEW = 8, // For Texture
  NGFX_RESOURCE_UNORDERED_ACCESS_VIEW = 16, // For Buffer
  NGFX_RESOURCE_RENDER_TARGET_VIEW = 32,
  NGFX_RESOURCE_DEPTH_STENCIL_VIEW = 64,
  /*
  EGVT_Sampler = 128,
  EGVT_SOV,
  */
};

enum NGFXResourceType 
{
  NGFX_TEXTURE_1D,
  NGFX_TEXTURE_1D_ARRAY,
  NGFX_TEXTURE_2D,
  NGFX_TEXTURE_2D_ARRAY,
  NGFX_TEXTURE_2DMS,
  NGFX_TEXTURE_2DMS_ARRAY,
  NGFX_TEXTURE_3D,
  NGFX_TEXTURE_CUBE,
  NGFX_BUFFER,
  NGFX_RESOURCE_TYPE_NUM
};

enum NGFXViewDimension 
{
  NGFX_VIEW_DIMENSION_BUFFER,
  NGFX_VIEW_DIMENSION_TEXTURE_1D,
  NGFX_VIEW_DIMENSION_TEXTURE_2D,
  NGFX_VIEW_DIMENSION_TEXTURE_3D,
  NGFX_VIEW_DIMENSION_NUM
};

enum NGFXResourceAccessFlag 
{
  NGFX_ACCESS_READ = 0x1,
  NGFX_ACCESS_WRITE = 0x1 << 1,
  NGFX_ACCESS_READ_AND_WRITE = 0x3,
  NGFX_ACCESS_HOST_VISIBLE = 0x1 << 2,
  NGFX_ACCESS_DEVICE_VISIBLE = 0x1 << 3,
  NGFX_ACCESS_HOST_COHERENT = 0x1 << 4,
  NGFX_ACCESS_HOST_CACHED = 0x1 << 5,
};

inline NGFXResourceAccessFlag operator|(NGFXResourceAccessFlag const& lhs,
  NGFXResourceAccessFlag const& rhs)
{
  return NGFXResourceAccessFlag(uint32(lhs) | uint32(rhs));
}

enum NGFXResourceCreationFlag 
{
  NGFX_RESOURCE_DYNAMIC = 0,
  NGFX_RESOURCE_STATIC = 1,
  NGFX_RESOURCE_TRANSFER_SRC = 2,
  NGFX_RESOURCE_TRANSFER_DST = 4
};

inline NGFXResourceCreationFlag operator|(NGFXResourceCreationFlag const& lhs,
  NGFXResourceCreationFlag const& rhs)
{
  return NGFXResourceCreationFlag(uint32(lhs) | uint32(rhs));
}

enum NGFXResourceOrigin 
{
  NGFX_RESOURCE_ORIGIN_USER,
  NGFX_RESOURCE_ORIGIN_SWAPCHAIN,
};

/**
* Same as VkImageAspectFlagBits
*/
enum NGFXTextureAspectFlag 
{
  NGFX_ASPECT_COLOR = 1,
  NGFX_ASPECT_DEPTH = 1 << 1,
  NGFX_ASPECT_STENCIL = 1 << 2,
  NGFX_ASPECT_METADATA = 1 << 3,
};

inline NGFXTextureAspectFlag operator|(NGFXTextureAspectFlag const& lhs,
  NGFXTextureAspectFlag const& rhs)
{
  return NGFXTextureAspectFlag(uint32(lhs) | uint32(rhs));
}

enum NGFXShaderFormat 
{
  NGFX_SHADER_FORMAT_TEXT,
  NGFX_SHADER_FORMAT_BYTE_CODE,
};

enum NGFXShaderLang 
{
  NGFX_SHADER_LANG_GLSL,
  NGFX_SHADER_LANG_ESSL,
  NGFX_SHADER_LANG_VKGLSL,
  NGFX_SHADER_LANG_HLSL,
  NGFX_SHADER_LANG_METALSL,
};

enum NGFXShaderProfile 
{
  NGFX_SHADER_PROFILE_LEGACY, // SM4_x, ES2.0,
  NGFX_SHADER_PROFILE_MODERN, // SM5_x, ES3.1, GLSL4XX, MSL
};

enum NGFXShaderSemantic 
{
  NGFX_SEMANTIC_POSITION,
  NGFX_SEMANTIC_COLOR,
  NGFX_SEMANTIC_NORMAL,
};

enum NGFXShaderDataType 
{
  NGFX_SHADER_VAR_BOOL,
  NGFX_SHADER_VAR_BOOL2,
  NGFX_SHADER_VAR_BOOL3,
  NGFX_SHADER_VAR_BOOL4,
  NGFX_SHADER_VAR_INT,
  NGFX_SHADER_VAR_INT2,
  NGFX_SHADER_VAR_INT3,
  NGFX_SHADER_VAR_INT4,
  NGFX_SHADER_VAR_UINT,
  NGFX_SHADER_VAR_UINT2,
  NGFX_SHADER_VAR_UINT3,
  NGFX_SHADER_VAR_UINT4,
  NGFX_SHADER_VAR_FLOAT,
  NGFX_SHADER_VAR_FLOAT2,
  NGFX_SHADER_VAR_FLOAT3,
  NGFX_SHADER_VAR_FLOAT4,
  NGFX_SHADER_VAR_MAT2,
  NGFX_SHADER_VAR_MAT2X3,
  NGFX_SHADER_VAR_MAT2X4,
  NGFX_SHADER_VAR_MAT3X2,
  NGFX_SHADER_VAR_MAT3,
  NGFX_SHADER_VAR_MAT3X4,
  NGFX_SHADER_VAR_MAT4X2,
  NGFX_SHADER_VAR_MAT4X3,
  NGFX_SHADER_VAR_MAT4,
  NGFX_SHADER_VAR_UNKNOWN
};

enum NGFXShaderBindType 
{
  NGFX_SHADER_BIND_UNDEFINED = 0,
  NGFX_SHADER_BIND_BLOCK = 0x1,
  NGFX_SHADER_BIND_SAMPLER = 0x1 << 1,
  NGFX_SHADER_BIND_SAMPLED_IMAGE = 0x1 << 2,
  NGFX_SHADER_BIND_SAMPLER_IMAGE_COMBINE = (NGFX_SHADER_BIND_SAMPLER | NGFX_SHADER_BIND_SAMPLED_IMAGE),
  NGFX_SHADER_BIND_STORAGE_BUFFER = 0x1 << 3,  // StructedBuffer
  NGFX_SHADER_BIND_STORAGE_IMAGE = 0x1 << 4,   // RWTexture(SRV)?
  NGFX_SHADER_BIND_TEXEL_BUFFER = 0x1 << 5,
  NGFX_SHADER_BIND_RWTEXEL_BUFFER = 0x1 << 6,  // RWTexture(UAV)
  NGFX_SHADER_BIND_CONSTANTS = 0x1 << 7
};


#endif